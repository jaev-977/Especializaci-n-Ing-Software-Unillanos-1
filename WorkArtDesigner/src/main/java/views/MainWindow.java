/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views;

import DAO.ShapesDAO;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Image;

import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import models.Circle;
import models.Images;
import models.Line;
import models.Point;
import models.Square;
import models.Rectangle;


/**
 *
 * @author J&H
 */
public final class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    ShapesDAO shapes;
    Images o;
    MainPanel panel;
    int x,y,x2,y2;
    Color color_array[];
    Image imge;
    Gson gson=new Gson();

   
    
    
   
    public MainWindow(ShapesDAO shapes) {
        initComponents();
        this.shapes=shapes;
        color_array = new Color[4];
        color_array[0]=Color.green;
        color_array[1]=Color.blue;
        color_array[2]=Color.yellow;
        color_array[3]=Color.red;
        
    }
    
        
    public static ImageIcon fondo1; 
   

    
//  public class Imagen extends javax.swing.JPanel {
// 
//    public Imagen() {
//        this.setSize(300, 400); //se selecciona el tamaño del panel
//    }
//
//    //Se crea un método cuyo parámetro debe ser un objeto Graphics
//
//    @Override
//    public void paint(Graphics grafico) {
//        Dimension height = getSize();
//
//    //Se selecciona la imagen que tenemos en el paquete de la //ruta del programa
//
//    ImageIcon Img = new ImageIcon(getClass().getResource("/pru/2.png")); 
//
//        //se dibuja la imagen que tenemos en el paquete Images //dentro de un panel
//
//        grafico.drawImage(Img.getImage(), 0, 0, height.width, height.height, null);
//
//        setOpaque(false);
//        super.paintComponent(grafico);
//}   
//}
    
    public void setPanel()
    {
        if (panel != null)
            this.remove(panel);
        panel = new MainPanel(shapes);
        this.add(panel,BorderLayout.CENTER);
        this.setSize(1200,900);
        this.repaint();
        drawOnMouseEvent();
    }
    
    public void drawOnMouseEvent(){
    
        MouseListener listener =  new MouseListener(){
            @Override
            public void mouseClicked(MouseEvent e) {
            }

            @Override
            public void mousePressed(MouseEvent e) {
                x=e.getX();
                y=e.getY();
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                x2=e.getX();
                y2=e.getY();
                if (cshape.getSelectedIndex()==0)
                    {
                        Circle circle = new Circle((x2-x)/2,new Point(x,y),color_array[ccolor.getSelectedIndex()]);
                        shapes.addShape(circle);
                    }
                 if (cshape.getSelectedIndex()==1)
                    {
                        Line line = new Line(new Point(x,y),new Point(x2,y2),color_array[ccolor.getSelectedIndex()]);
                        shapes.addShape(line);
                    }
                
                 if (cshape.getSelectedIndex()==2)
                    {
                        Square square= new Square((x2-x)/2,new Point(x,y),color_array[ccolor.getSelectedIndex()]);
                        shapes.addShape(square);
                    }
                 if (cshape.getSelectedIndex()==3)
                    {
                        Rectangle rectangle= new Rectangle((x2-x)/2,new Point(x,y),color_array[ccolor.getSelectedIndex()]);
                        shapes.addShape(rectangle);
                    }
                 panel.repaint();
                 
             }
            @Override
            public void mouseEntered(MouseEvent arg0) {
            }

            @Override
            public void mouseExited(MouseEvent arg0) {
            }
            
                
    
    };
    this.panel.addMouseListener(listener);
            }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cshape = new javax.swing.JComboBox<>();
        ccolor = new javax.swing.JComboBox<>();
        loimage = new javax.swing.JButton();
        saved_imag = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        cshape.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Circulo", "Linea", "Cuadrado", "Rectangulo" }));

        ccolor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Green", "Blue", "Yellow", "Red" }));

        loimage.setText("Load Image");
        loimage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loimageActionPerformed(evt);
            }
        });

        saved_imag.setText("Saved Json");
        saved_imag.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saved_imagActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(675, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(loimage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(cshape, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ccolor, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(saved_imag, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(213, Short.MAX_VALUE)
                        .addComponent(loimage))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(cshape, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ccolor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(saved_imag)
                .addGap(273, 273, 273))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loimageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loimageActionPerformed
        // TODO add your handling code here:
           if(panel.seleccionar.showDialog(null,null)==JFileChooser.APPROVE_OPTION){
//             MainPanel el = new MainPanel(shapes);  
            panel.archivo=panel.seleccionar.getSelectedFile();
            
               
            if(panel.archivo.canRead()){
                panel.imag=panel.AbrirArchivo(panel.archivo);
                try {
                    panel.orginalIM=ImageIO.read(panel.seleccionar.getSelectedFile());
//                    o.setLabelImagen(ImageIO.read(panel.seleccionar.getSelectedFile()));
//                    o.setFondopanel(new Dimension((ImageIO.read(panel.seleccionar.getSelectedFile()).getWidth()),(ImageIO.read(panel.seleccionar.getSelectedFile()).getHeight())));
                    panel.setSize((ImageIO.read(panel.seleccionar.getSelectedFile()).getWidth()),(ImageIO.read(panel.seleccionar.getSelectedFile()).getHeight()));
                } catch (IOException ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
               
            }else{
                JOptionPane.showMessageDialog(null,"Archivo No Compatible");
            }
//            fondo1= new ImageIcon(j.getSelectedFile().toString());
//            panel.imagen = 
//            new ImageIcon("2.png").getImage();
//            panel = new MainPanel(shapes);
//            panel.setVisible(true);
                     
        }
        
        panel.repaint();
       
        
    }//GEN-LAST:event_loimageActionPerformed

    private void saved_imagActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saved_imagActionPerformed
        // TODO add your handling code here:
        String json;
        
        json = gson.toJson(shapes.getCircles());
    }//GEN-LAST:event_saved_imagActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
          
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
               // new MainWindow().setVisible(true); 
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ccolor;
    private javax.swing.JComboBox<String> cshape;
    private javax.swing.JButton loimage;
    private javax.swing.JButton saved_imag;
    // End of variables declaration//GEN-END:variables

    
}

